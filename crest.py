# CREATED BY Crestan#0001

import base64
exec(base64.b64decode('aW1wb3J0IGN0eXBlcwppbXBvcnQgc3RyaW5nCmltcG9ydCBvcwppbXBvcnQgdGltZQpMSUNORUNFID0gIiIiCkNvcHlyaWdodCAoYykgMjAyMSBDcmVzdGFuIzAwMDEgY3Jlc3RhbnJhYm95QGdtYWlsLmNvbQoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgcGFpZCBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSDigJxTb2Z0d2FyZeKAnSksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQg4oCcQVMgSVPigJ0sIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoiIiIKClVTRV9XRUJIT09LID0gVHJ1ZQoKcHJpbnQoTElDTkVDRSkKCnRpbWUuc2xlZXAoMykKb3Muc3lzdGVtKCdjbHMnIGlmIG9zLm5hbWUgPT0gJ250JyBlbHNlICdjbGVhcicpCgoKdHJ5OiAgIyBDaGVjayBpZiB0aGUgcmVxdXJlbWVudHMgaGF2ZSBiZWVuIGluc3RhbGxlZAogICAgZnJvbSBkaXNjb3JkX3dlYmhvb2sgaW1wb3J0IERpc2NvcmRXZWJob29rICAjIFRyeSB0byBpbXBvcnQgZGlzY29yZF93ZWJob29rCmV4Y2VwdCBJbXBvcnRFcnJvcjogICMgSWYgaXQgY2hvdWxkIG5vdCBiZSBpbnN0YWxsZWQKICAgICMgVGVsbCB0aGUgdXNlciBpdCBoYXMgbm90IGJlZW4gaW5zdGFsbGVkIGFuZCBob3cgdG8gaW5zdGFsbCBpdAogICAgaW5wdXQoCiAgICAgICAgZiJNb2R1bGUgZGlzY29yZF93ZWJob29rIG5vdCBpbnN0YWxsZWQsIHRvIGluc3RhbGwgcnVuICd7J3B5IC0zJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAncHl0aG9uMy44J30gLW0gcGlwIGluc3RhbGwgZGlzY29yZF93ZWJob29rJ1xuWW91IGNhbiBpZ25vcmUgdGhpcyBlcnJvciBpZiB5b3UgYXJlbid0IGdvaW5nIHRvIHVzZSBhIHdlYmhvb2suXG5QcmVzcyBlbnRlciB0byBjb250aW51ZS4iKQogICAgVVNFX1dFQkhPT0sgPSBGYWxzZQp0cnk6ICAjIFNldHVwIHRyeSBzdGF0ZW1lbnQgdG8gY2F0Y2ggdGhlIGVycm9yCiAgICBpbXBvcnQgcmVxdWVzdHMgICMgVHJ5IHRvIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgSW1wb3J0RXJyb3I6ICAjIElmIGl0IGhhcyBub3QgYmVlbiBpbnN0YWxsZWQKICAgICMgVGVsbCB0aGUgdXNlciBpdCBoYXMgbm90IGJlZW4gaW5zdGFsbGVkIGFuZCBob3cgdG8gaW5zdGFsbCBpdAogICAgaW5wdXQoCiAgICAgICAgZiJNb2R1bGUgcmVxdWVzdHMgbm90IGluc3RhbGxlZCwgdG8gaW5zdGFsbCBydW4gJ3sncHkgLTMnIGlmIG9zLm5hbWUgPT0gJ250JyBlbHNlICdweXRob24zLjgnfSAtbSBwaXAgaW5zdGFsbCByZXF1ZXN0cydcblByZXNzIGVudGVyIHRvIGV4aXQiKQogICAgZXhpdCgpICAjIEV4aXQgdGhlIHByb2dyYW0KdHJ5OiAgIyBTZXR1cCB0cnkgc3RhdGVtZW50IHRvIGNhdGNoIHRoZSBlcnJvcgogICAgaW1wb3J0IG51bXB5ICAjIFRyeSB0byBpbXBvcnQgcmVxdWVzdHMKZXhjZXB0IEltcG9ydEVycm9yOiAgIyBJZiBpdCBoYXMgbm90IGJlZW4gaW5zdGFsbGVkCiAgICAjIFRlbGwgdGhlIHVzZXIgaXQgaGFzIG5vdCBiZWVuIGluc3RhbGxlZCBhbmQgaG93IHRvIGluc3RhbGwgaXQKICAgIGlucHV0KAogICAgICAgIGYiTW9kdWxlIG51bXB5IG5vdCBpbnN0YWxsZWQsIHRvIGluc3RhbGwgcnVuICd7J3B5IC0zJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAncHl0aG9uMy44J30gLW0gcGlwIGluc3RhbGwgbnVtcHknXG5QcmVzcyBlbnRlciB0byBleGl0IikKICAgIGV4aXQoKSAgIyBFeGl0IHRoZSBwcm9ncmFtCgojIGNoZWNrIGlmIHVzZXIgaXMgY29ubmVjdGVkIHRvIGludGVybmV0CnVybCA9ICJodHRwczovL2dpdGh1Yi5jb20iCnRyeToKICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCkgICMgR2V0IHRoZSByZXNwb25jZSBmcm9tIHRoZSB1cmwKICAgIHByaW50KCJJbnRlcm5ldCBjaGVjayIpCiAgICB0aW1lLnNsZWVwKC40KQpleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6CiAgICAjIFRlbGwgdGhlIHVzZXIKICAgIGlucHV0KCJZb3UgYXJlIG5vdCBjb25uZWN0ZWQgdG8gaW50ZXJuZXQsIGNoZWNrIHlvdXIgY29ubmVjdGlvbiBhbmQgdHJ5IGFnYWluLlxuUHJlc3MgZW50ZXIgdG8gZXhpdCIpCiAgICBleGl0KCkgICMgRXhpdCBwcm9ncmFtCgoKY2xhc3MgTml0cm9HZW46ICAjIEluaXRpYWxpc2UgdGhlIGNsYXNzCiAgICBkZWYgX19pbml0X18oc2VsZik6ICAjIFRoZSBpbml0YWxpc2VhaXRvbiBmdW5jdGlvbgogICAgICAgIHNlbGYuZmlsZU5hbWUgPSAiTml0cm8gQ29kZXMudHh0IiAgIyBTZXQgdGhlIGZpbGUgbmFtZSB0aGUgY29kZXMgYXJlIHN0b3JlZCBpbgoKICAgIGRlZiBtYWluKHNlbGYpOiAgIyBUaGUgbWFpbiBmdW5jdGlvbiBjb250YWlucyB0aGUgbW9zdCBpbXBvcnRhbnQgY29kZQogICAgICAgIG9zLnN5c3RlbSgnY2xzJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAnY2xlYXInKSAgIyBDbGVhciB0aGUgc2NyZWVuCiAgICAgICAgaWYgb3MubmFtZSA9PSAibnQiOiAgIyBJZiB0aGUgc3lzdGVtIGlzIHdpbmRvd3MKICAgICAgICAgICAgcHJpbnQoIiIpCiAgICAgICAgICAgIGN0eXBlcy53aW5kbGwua2VybmVsMzIuU2V0Q29uc29sZVRpdGxlVygKICAgICAgICAgICAgICAgICJOaXRybyBHZW5lcmF0b3IgYW5kIENoZWNrZXIgLSBNYWRlIGJ5IENyZXN0YW4jMDAwMSIpICAjIENoYW5nZSB0aGUKICAgICAgICBlbHNlOiAgIyBPciBpZiBpdCBpcyB1bml4CiAgICAgICAgICAgIHByaW50KGYnXDMzXTA7Tml0cm8gR2VuZXJhdG9yIGFuZCBDaGVja2VyIC0gTWFkZSBieSBDcmVzdGFuIzAwMDFcYScsCiAgICAgICAgICAgICAgICAgIGVuZD0nJywgZmx1c2g9VHJ1ZSkgICMgVXBkYXRlIHRpdGxlIG9mIGNvbW1hbmQgcHJvbXB0CgogICAgICAgIHByaW50KCIiIiBDUkVTVEFOCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIiKSAgIyBQcmludCB0aGUgdGl0bGUgY2FyZAogICAgICAgIHRpbWUuc2xlZXAoMikgICMgV2FpdCBhIGZldyBzZWNvbmRzCiAgICAgICAgIyBQcmludCB3aG8gZGV2ZWxvcGVkIHRoZSBjb2RlCiAgICAgICAgc2VsZi5zbG93VHlwZSgiTWFkZSBieTogQ3Jlc3RhbiMwMDAxIiwgLjAyKQogICAgICAgIHRpbWUuc2xlZXAoMSkgICMgV2FpdCBhIGxpdHRsZSBtb3JlCiAgICAgICAgIyBQcmludCB0aGUgZmlyc3QgcXVlc3Rpb24KICAgICAgICBzZWxmLnNsb3dUeXBlKAogICAgICAgICAgICAiXG5JbnB1dCBIb3cgTWFueSBDb2RlcyB0byBHZW5lcmF0ZSBhbmQgQ2hlY2s6ICIsIC4wMiwgbmV3TGluZT1GYWxzZSkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBudW0gPSBpbnQoaW5wdXQoJycpKSAgIyBBc2sgdGhlIHVzZXIgZm9yIHRoZSBhbW91bnQgb2YgY29kZXMKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgaW5wdXQoIlNwZWNpZmllZCBpbnB1dCB3YXNuJ3QgYSBudW1iZXIuXG5QcmVzcyBlbnRlciB0byBleGl0IikKICAgICAgICAgICAgZXhpdCgpICAjIEV4aXQgcHJvZ3JhbQoKICAgICAgICBpZiBVU0VfV0VCSE9PSzoKICAgICAgICAgICAgIyBHZXQgdGhlIHdlYmhvb2sgdXJsLCBpZiB0aGUgdXNlciBkb2VzIG5vdCB3aXNoIHRvIHVzZSBhIHdlYmhvb2sgdGhlIG1lc3NhZ2Ugd2lsbCBiZSBhbiBlbXB0eSBzdHJpbmcKICAgICAgICAgICAgc2VsZi5zbG93VHlwZSgKICAgICAgICAgICAgICAgICJJZiB5b3Ugd2FudCB0byB1c2UgYSBEaXNjb3JkIHdlYmhvb2ssIHR5cGUgaXQgaGVyZSBvciBwcmVzcyBlbnRlciB0byBpZ25vcmU6ICIsIC4wMiwgbmV3TGluZT1GYWxzZSkKICAgICAgICAgICAgdXJsID0gaW5wdXQoJycpICAjIEdldCB0aGUgYXduc2VyCiAgICAgICAgICAgICMgSWYgdGhlIHVybCBpcyBlbXB0eSBtYWtlIGl0IGJlIE5vbmUgaW5zdGVkCiAgICAgICAgICAgIHdlYmhvb2sgPSB1cmwgaWYgdXJsICE9ICIiIGVsc2UgTm9uZQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgd2ViaG9vayBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIERpc2NvcmRXZWJob29rKCAgIyBMZXQgdGhlIHVzZXIga25vdyBpdCBoYXMgc3RhcnRlZCBsb2dnaW5nIHRoZSBpZHMKICAgICAgICAgICAgICAgICAgICAgICAgdXJsPXVybCwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD1mImBgYFN0YXJ0ZWQgY2hlY2tpbmcgdXJsc1xuSSB3aWxsIHNlbmQgYW55IHZhbGlkIGNvZGVzIGhlcmVgYGAiCiAgICAgICAgICAgICAgICAgICAgKS5leGVjdXRlKCkKCiAgICAgICAgIyBwcmludCgpICMgUHJpbnQgYSBuZXdsaW5lIGZvciBsb29rcwoKICAgICAgICB2YWxpZCA9IFtdICAjIEtlZXAgdHJhY2sgb2YgdmFsaWQgY29kZXMKICAgICAgICBpbnZhbGlkID0gMCAgIyBLZWVwIHRyYWNrIG9mIGhvdyBtYW55IGludmFsaWQgY29kZXMgd2FzIGRldGVjdGVkCiAgICAgICAgY2hhcnMgPSBbXQogICAgICAgIGNoYXJzWzowXSA9IHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cwoKICAgICAgICAjIGdlbmVyYXRlIGNvZGVzIGZhc3RlciB0aGFuIHVzaW5nIHJhbmRvbS5jaG9pY2UKICAgICAgICBjID0gbnVtcHkucmFuZG9tLmNob2ljZShjaGFycywgc2l6ZT1bbnVtLCAyNF0pCiAgICAgICAgZm9yIHMgaW4gYzogICMgTG9vcCBvdmVyIHRoZSBhbW91bnQgb2YgY29kZXMgdG8gY2hlY2sKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgY29kZSA9ICcnLmpvaW4oeCBmb3IgeCBpbiBzKQogICAgICAgICAgICAgICAgdXJsID0gZiJodHRwczovL2Rpc2NvcmQuZ2lmdC97Y29kZX0iICAjIEdlbmVyYXRlIHRoZSB1cmwKCiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmLnF1aWNrQ2hlY2tlcih1cmwsIHdlYmhvb2spICAjIENoZWNrIHRoZSBjb2RlcwoKICAgICAgICAgICAgICAgIGlmIHJlc3VsdDogICMgSWYgdGhlIGNvZGUgd2FzIHZhbGlkCiAgICAgICAgICAgICAgICAgICAgIyBBZGQgdGhhdCBjb2RlIHRvIHRoZSBsaXN0IG9mIGZvdW5kIGNvZGVzCiAgICAgICAgICAgICAgICAgICAgdmFsaWQuYXBwZW5kKHVybCkKICAgICAgICAgICAgICAgIGVsc2U6ICAjIElmIHRoZSBjb2RlIHdhcyBub3QgdmFsaWQKICAgICAgICAgICAgICAgICAgICBpbnZhbGlkICs9IDEgICMgSW5jcmVhc2UgdGhlIGludmFsaWQgY291bnRlciBieSBvbmUKICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICAgICAgIyBJZiB0aGUgdXNlciBpbnRlcnJ1cHRlZCB0aGUgcHJvZ3JhbQogICAgICAgICAgICAgICAgcHJpbnQoIlxuSW50ZXJydXB0ZWQgYnkgdXNlciIpCiAgICAgICAgICAgICAgICBicmVhayAgIyBCcmVhayB0aGUgbG9vcAoKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOiAgIyBJZiB0aGUgcmVxdWVzdCBmYWlscwogICAgICAgICAgICAgICAgcHJpbnQoZiIgRXJyb3IgfCB7dXJsfSAiKSAgIyBUZWxsIHRoZSB1c2VyIGFuIGVycm9yIG9jY3VycmVkCgogICAgICAgICAgICBpZiBvcy5uYW1lID09ICJudCI6ICAjIElmIHRoZSBzeXN0ZW0gaXMgd2luZG93cwogICAgICAgICAgICAgICAgY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5TZXRDb25zb2xlVGl0bGVXKAogICAgICAgICAgICAgICAgICAgIGYiTml0cm8gR2VuZXJhdG9yIGFuZCBDaGVja2VyIC0ge2xlbih2YWxpZCl9IFZhbGlkIHwge2ludmFsaWR9IEludmFsaWQgLSBNYWRlIGJ5IENyZXN0YW4jMDAwMSIpICAjIENoYW5nZSB0aGUgdGl0bGUKICAgICAgICAgICAgICAgIHByaW50KCIiKQogICAgICAgICAgICBlbHNlOiAgIyBJZiBpdCBpcyBhIHVuaXggc3lzdGVtCiAgICAgICAgICAgICAgICAjIENoYW5nZSB0aGUgdGl0bGUKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgIGYnXDMzXTA7Tml0cm8gR2VuZXJhdG9yIGFuZCBDaGVja2VyIC0ge2xlbih2YWxpZCl9IFZhbGlkIHwge2ludmFsaWR9IEludmFsaWQgLSBNYWRlIGJ5IENyZXN0YW4jMDAwMVxhJywgZW5kPScnLCBmbHVzaD1UcnVlKQoKICAgICAgICBwcmludChmIiIiClJlc3VsdHM6CiBWYWxpZDoge2xlbih2YWxpZCl9CiBJbnZhbGlkOiB7aW52YWxpZH0KIFZhbGlkIENvZGVzOiB7JywgJy5qb2luKHZhbGlkKX0iIiIpICAjIEdpdmUgYSByZXBvcnQgb2YgdGhlIHJlc3VsdHMgb2YgdGhlIGNoZWNrCgogICAgICAgICMgVGVsbCB0aGUgdXNlciB0aGUgcHJvZ3JhbSBmaW5pc2hlZAogICAgICAgIGlucHV0KCJcblRoZSBlbmQhIFByZXNzIEVudGVyIDUgdGltZXMgdG8gY2xvc2UgdGhlIHByb2dyYW0uIikKICAgICAgICBbaW5wdXQoaSkgZm9yIGkgaW4gcmFuZ2UoNCwgMCwgLTEpXSAgIyBXYWl0IGZvciA0IGVudGVyIHByZXNzZXMKCiAgICAjIEZ1bmN0aW9uIHVzZWQgdG8gcHJpbnQgdGV4dCBhIGxpdHRsZSBtb3JlIGZhbmNpZXIKICAgIGRlZiBzbG93VHlwZShzZWxmLCB0ZXh0OiBzdHIsIHNwZWVkOiBmbG9hdCwgbmV3TGluZT1UcnVlKToKICAgICAgICBmb3IgaSBpbiB0ZXh0OiAgIyBMb29wIG92ZXIgdGhlIG1lc3NhZ2UKICAgICAgICAgICAgIyBQcmludCB0aGUgb25lIGNoYXJlY3RlciwgZmx1c2ggaXMgdXNlZCB0byBmb3JjZSBweXRob24gdG8gcHJpbnQgdGhlIGNoYXIKICAgICAgICAgICAgcHJpbnQoaSwgZW5kPSIiLCBmbHVzaD1UcnVlKQogICAgICAgICAgICB0aW1lLnNsZWVwKHNwZWVkKSAgIyBTbGVlcCBhIGxpdHRsZSBiZWZvcmUgdGhlIG5leHQgb25lCiAgICAgICAgaWYgbmV3TGluZTogICMgQ2hlY2sgaWYgdGhlIG5ld0xpbmUgYXJndW1lbnQgaXMgc2V0IHRvIFRydWUKICAgICAgICAgICAgcHJpbnQoKSAgIyBQcmludCBhIGZpbmFsIG5ld2xpbmUgdG8gbWFrZSBpdCBhY3QgbW9yZSBsaWtlIGEgbm9ybWFsIHByaW50IHN0YXRlbWVudAoKICAgIGRlZiBxdWlja0NoZWNrZXIoc2VsZiwgbml0cm86c3RyLCBub3RpZnk9Tm9uZSk6ICAjIFVzZWQgdG8gY2hlY2sgYSBzaW5nbGUgY29kZSBhdCBhIHRpbWUKICAgICAgICAjIEdlbmVyYXRlIHRoZSByZXF1ZXN0IHVybAogICAgICAgIHVybCA9IGYiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hcGkvdjkvZW50aXRsZW1lbnRzL2dpZnQtY29kZXMve25pdHJvfT93aXRoX2FwcGxpY2F0aW9uPWZhbHNlJndpdGhfc3Vic2NyaXB0aW9uX3BsYW49dHJ1ZSIKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpICAjIEdldCB0aGUgcmVzcG9uc2UgZnJvbSBkaXNjb3JkCgogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDogICMgSWYgdGhlIHJlc3BvbmNlIHdlbnQgdGhyb3VnaAogICAgICAgICAgICAjIE5vdGlmeSB0aGUgdXNlciB0aGUgY29kZSB3YXMgdmFsaWQKICAgICAgICAgICAgcHJpbnQoZiIgVmFsaWQgfCB7bml0cm99ICIsIGZsdXNoPVRydWUsCiAgICAgICAgICAgICAgICAgIGVuZD0iIiBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAiXG4iKQogICAgICAgICAgICB3aXRoIG9wZW4oIk5pdHJvIENvZGVzLnR4dCIsICJ3IikgYXMgZmlsZTogICMgT3BlbiBmaWxlIHRvIHdyaXRlCiAgICAgICAgICAgICAgICAjIFdyaXRlIHRoZSBuaXRybyBjb2RlIHRvIHRoZSBmaWxlIGl0IHdpbGwgYXV0b21hdGljYWxseSBhZGQgYSBuZXdsaW5lCiAgICAgICAgICAgICAgICBmaWxlLndyaXRlKG5pdHJvKQoKICAgICAgICAgICAgaWYgbm90aWZ5IGlzIG5vdCBOb25lOiAgIyBJZiBhIHdlYmhvb2sgaGFzIGJlZW4gYWRkZWQKICAgICAgICAgICAgICAgIERpc2NvcmRXZWJob29rKCAgIyBTZW5kIHRoZSBtZXNzYWdlIHRvIGRpc2NvcmQgbGV0dGluZyB0aGUgdXNlciBrbm93IHRoZXJlIGhhcyBiZWVuIGEgdmFsaWQgbml0cm8gY29kZQogICAgICAgICAgICAgICAgICAgIHVybD11cmwsCiAgICAgICAgICAgICAgICAgICAgY29udGVudD1mIlZhbGlkIE5pdG8gQ29kZSBkZXRlY3RlZCEgQGV2ZXJ5b25lIFxue25pdHJvfSIKICAgICAgICAgICAgICAgICkuZXhlY3V0ZSgpCgogICAgICAgICAgICByZXR1cm4gVHJ1ZSAgIyBUZWxsIHRoZSBtYWluIGZ1bmN0aW9uIHRoZSBjb2RlIHdhcyBmb3VuZAoKICAgICAgICAjIElmIHRoZSByZXNwb25jZSBnb3QgaWdub3JlZCBvciBpcyBpbnZhbGlkICggc3VjaCBhcyBhIDQwNCBvciA0MDUgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgVGVsbCB0aGUgdXNlciBpdCB0ZXN0ZWQgYSBjb2RlIGFuZCBpdCB3YXMgaW52YWxpZAogICAgICAgICAgICBwcmludChmIiBJbnZhbGlkIHwge25pdHJvfSAiLCBmbHVzaD1UcnVlLAogICAgICAgICAgICAgICAgICBlbmQ9IiIgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgIlxuIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlICAjIFRlbGwgdGhlIG1haW4gZnVuY3Rpb24gdGhlcmUgd2FzIG5vdCBhIGNvZGUgZm91bmQKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgR2VuID0gTml0cm9HZW4oKSAgIyBDcmVhdGUgdGhlIG5pdHJvIGdlbmVyYXRvciBvYmplY3QKICAgIEdlbi5tYWluKCkgICMgUnVuIHRoZSBtYWluIGNvZGUK'))